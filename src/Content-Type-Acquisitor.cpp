//
//  Content-Type-Acquisitor.cpp
//  async-http
//
//  Created by 贾皓翔 on 2019/6/8.
//  Copyright © 2019 贾皓翔. All rights reserved.
//

#include "Content-Type-Acquisitor.hpp" 
#include <fstream>
#include <stdexcept>

namespace HTTP {
    ContentTypeAscquisitor::ContentTypeAscquisitor(){
        map_.insert(std::make_pair(".001", "application/x-001"));
        map_.insert(std::make_pair(".301", "application/x-301"));
        map_.insert(std::make_pair(".323", "text/h323"));
        map_.insert(std::make_pair(".906", "application/x-906"));
        map_.insert(std::make_pair(".907", "drawing/907"));
        map_.insert(std::make_pair(".a11", "application/x-a11"));
        map_.insert(std::make_pair(".acp", "audio/x-mei-aac"));
        map_.insert(std::make_pair(".ai", "application/postscript"));
        map_.insert(std::make_pair(".aif", "audio/aiff"));
        map_.insert(std::make_pair(".aifc", "audio/aiff"));
        map_.insert(std::make_pair(".aiff", "audio/aiff"));
        map_.insert(std::make_pair(".anv", "application/x-anv"));
        map_.insert(std::make_pair(".asa", "text/asa"));
        map_.insert(std::make_pair(".asf", "video/x-ms-asf"));
        map_.insert(std::make_pair(".asp", "text/asp"));
        map_.insert(std::make_pair(".asx", "video/x-ms-asf"));
        map_.insert(std::make_pair(".au", "audio/basic"));
        map_.insert(std::make_pair(".avi", "video/avi"));
        map_.insert(std::make_pair(".awf", "application/vnd.adobe.workflow"));
        map_.insert(std::make_pair(".biz", "text/xml"));
        map_.insert(std::make_pair(".bmp", "application/x-bmp"));
        map_.insert(std::make_pair(".bot", "application/x-bot"));
        map_.insert(std::make_pair(".c4t", "application/x-c4t"));
        map_.insert(std::make_pair(".c90", "application/x-c90"));
        map_.insert(std::make_pair(".cal", "application/x-cals"));
        map_.insert(std::make_pair(".cat", "application/vnd.ms-pki.seccat"));
        map_.insert(std::make_pair(".cdf", "application/x-netcdf"));
        map_.insert(std::make_pair(".cdr", "application/x-cdr"));
        map_.insert(std::make_pair(".cel", "application/x-cel"));
        map_.insert(std::make_pair(".cer", "application/x-x509-ca-cert"));
        map_.insert(std::make_pair(".cg4", "application/x-g4"));
        map_.insert(std::make_pair(".cgm", "application/x-cgm"));
        map_.insert(std::make_pair(".cit", "application/x-cit"));
        map_.insert(std::make_pair(".class", "java/*"));
        map_.insert(std::make_pair(".cml", "text/xml"));
        map_.insert(std::make_pair(".cmp", "application/x-cmp"));
        map_.insert(std::make_pair(".cmx", "application/x-cmx"));
        map_.insert(std::make_pair(".cot", "application/x-cot"));
        map_.insert(std::make_pair(".crl", "application/pkix-crl"));
        map_.insert(std::make_pair(".crt", "application/x-x509-ca-cert"));
        map_.insert(std::make_pair(".csi", "application/x-csi"));
        map_.insert(std::make_pair(".css", "text/css"));
        map_.insert(std::make_pair(".cut", "application/x-cut"));
        map_.insert(std::make_pair(".dbf", "application/x-dbf"));
        map_.insert(std::make_pair(".dbm", "application/x-dbm"));
        map_.insert(std::make_pair(".dbx", "application/x-dbx"));
        map_.insert(std::make_pair(".dcd", "text/xml"));
        map_.insert(std::make_pair(".dcx", "application/x-dcx"));
        map_.insert(std::make_pair(".der", "application/x-x509-ca-cert"));
        map_.insert(std::make_pair(".dgn", "application/x-dgn"));
        map_.insert(std::make_pair(".dib", "application/x-dib"));
        map_.insert(std::make_pair(".dll", "application/x-msdownload"));
        map_.insert(std::make_pair(".doc", "application/msword"));
        map_.insert(std::make_pair(".dot", "application/msword"));
        map_.insert(std::make_pair(".drw", "application/x-drw"));
        map_.insert(std::make_pair(".dtd", "text/xml"));
        map_.insert(std::make_pair(".dwf", "Model/vnd.dwf"));
        map_.insert(std::make_pair(".dwf", "application/x-dwf"));
        map_.insert(std::make_pair(".dwg", "application/x-dwg"));
        map_.insert(std::make_pair(".dxb", "application/x-dxb"));
        map_.insert(std::make_pair(".dxf", "application/x-dxf"));
        map_.insert(std::make_pair(".edn", "application/vnd.adobe.edn"));
        map_.insert(std::make_pair(".emf", "application/x-emf"));
        map_.insert(std::make_pair(".eml", "message/rfc822"));
        map_.insert(std::make_pair(".ent", "text/xml"));
        map_.insert(std::make_pair(".epi", "application/x-epi"));
        map_.insert(std::make_pair(".eps", "application/x-ps"));
        map_.insert(std::make_pair(".eps", "application/postscript"));
        map_.insert(std::make_pair(".etd", "application/x-ebx"));
        map_.insert(std::make_pair(".exe", "application/x-msdownload"));
        map_.insert(std::make_pair(".fax", "image/fax"));
        map_.insert(std::make_pair(".fdf", "application/vnd.fdf"));
        map_.insert(std::make_pair(".fif", "application/fractals"));
        map_.insert(std::make_pair(".fo", "text/xml"));
        map_.insert(std::make_pair(".frm", "application/x-frm"));
        map_.insert(std::make_pair(".g4", "application/x-g4"));
        map_.insert(std::make_pair(".gbr", "application/x-gbr"));
        map_.insert(std::make_pair(".", "application/x-"));
        map_.insert(std::make_pair(".gif", "image/gif"));
        map_.insert(std::make_pair(".gl2", "application/x-gl2"));
        map_.insert(std::make_pair(".gp4", "application/x-gp4"));
        map_.insert(std::make_pair(".hgl", "application/x-hgl"));
        map_.insert(std::make_pair(".hmr", "application/x-hmr"));
        map_.insert(std::make_pair(".hpg", "application/x-hpgl"));
        map_.insert(std::make_pair(".hpl", "application/x-hpl"));
        map_.insert(std::make_pair(".hqx", "application/mac-binhex40"));
        map_.insert(std::make_pair(".hrf", "application/x-hrf"));
        map_.insert(std::make_pair(".hta", "application/hta"));
        map_.insert(std::make_pair(".htc", "text/x-component"));
        map_.insert(std::make_pair(".htm", "text/html"));
        map_.insert(std::make_pair(".html", "text/html"));
        map_.insert(std::make_pair(".htt", "text/webviewhtml"));
        map_.insert(std::make_pair(".htx", "text/html"));
        map_.insert(std::make_pair(".icb", "application/x-icb"));
        map_.insert(std::make_pair(".ico", "image/x-icon"));
        map_.insert(std::make_pair(".ico", "application/x-ico"));
        map_.insert(std::make_pair(".iff", "application/x-iff"));
        map_.insert(std::make_pair(".ig4", "application/x-g4"));
        map_.insert(std::make_pair(".igs", "application/x-igs"));
        map_.insert(std::make_pair(".iii", "application/x-iphone"));
        map_.insert(std::make_pair(".img", "application/x-img"));
        map_.insert(std::make_pair(".ins", "application/x-internet-signup"));
        map_.insert(std::make_pair(".isp", "application/x-internet-signup"));
        map_.insert(std::make_pair(".IVF", "video/x-ivf"));
        map_.insert(std::make_pair(".java", "java/*"));
        map_.insert(std::make_pair(".jfif", "image/jpeg"));
        map_.insert(std::make_pair(".jpe", "image/jpeg"));
        map_.insert(std::make_pair(".jpe", "application/x-jpe"));
        map_.insert(std::make_pair(".jpeg", "image/jpeg"));
        map_.insert(std::make_pair(".jpg", "image/jpeg"));
        map_.insert(std::make_pair(".jpg", "application/x-jpg"));
        map_.insert(std::make_pair(".js", "application/x-javascript"));
        map_.insert(std::make_pair(".jsp", "text/html"));
        map_.insert(std::make_pair(".la1", "audio/x-liquid-file"));
        map_.insert(std::make_pair(".lar", "application/x-laplayer-reg"));
        map_.insert(std::make_pair(".latex", "application/x-latex"));
        map_.insert(std::make_pair(".lavs", "audio/x-liquid-secure"));
        map_.insert(std::make_pair(".lbm", "application/x-lbm"));
        map_.insert(std::make_pair(".lmsff", "audio/x-la-lms"));
        map_.insert(std::make_pair(".ls", "application/x-javascript"));
        map_.insert(std::make_pair(".ltr", "application/x-ltr"));
        map_.insert(std::make_pair(".m1v", "video/x-mpeg"));
        map_.insert(std::make_pair(".m2v", "video/x-mpeg"));
        map_.insert(std::make_pair(".m3u", "audio/mpegurl"));
        map_.insert(std::make_pair(".m4e", "video/mpeg4"));
        map_.insert(std::make_pair(".mac", "application/x-mac"));
        map_.insert(std::make_pair(".man", "application/x-troff-man"));
        map_.insert(std::make_pair(".math", "text/xml"));
        map_.insert(std::make_pair(".mdb", "application/msaccess"));
        map_.insert(std::make_pair(".mdb", "application/x-mdb"));
        map_.insert(std::make_pair(".mfp", "application/x-shockwave-flash"));
        map_.insert(std::make_pair(".mht", "message/rfc822"));
        map_.insert(std::make_pair(".mhtml", "message/rfc822"));
        map_.insert(std::make_pair(".mi", "application/x-mi"));
        map_.insert(std::make_pair(".mid", "audio/mid"));
        map_.insert(std::make_pair(".midi", "audio/mid"));
        map_.insert(std::make_pair(".mil", "application/x-mil"));
        map_.insert(std::make_pair(".mml", "text/xml"));
        map_.insert(std::make_pair(".mnd", "audio/x-musicnet-download"));
        map_.insert(std::make_pair(".mns", "audio/x-musicnet-stream"));
        map_.insert(std::make_pair(".mocha", "application/x-javascript"));
        map_.insert(std::make_pair(".movie", "video/x-sgi-movie"));
        map_.insert(std::make_pair(".mp1", "audio/mp1"));
        map_.insert(std::make_pair(".mp2", "audio/mp2"));
        map_.insert(std::make_pair(".mp2v", "video/mpeg"));
        map_.insert(std::make_pair(".mp3", "audio/mp3"));
        map_.insert(std::make_pair(".mp4", "video/mpeg4"));
        map_.insert(std::make_pair(".mpa", "video/x-mpg"));
        map_.insert(std::make_pair(".mpd", "application/vnd.ms-project"));
        map_.insert(std::make_pair(".mpe", "video/x-mpeg"));
        map_.insert(std::make_pair(".mpeg", "video/mpg"));
        map_.insert(std::make_pair(".mpg", "video/mpg"));
        map_.insert(std::make_pair(".mpga", "audio/rn-mpeg"));
        map_.insert(std::make_pair(".mpp", "application/vnd.ms-project"));
        map_.insert(std::make_pair(".mps", "video/x-mpeg"));
        map_.insert(std::make_pair(".mpt", "application/vnd.ms-project"));
        map_.insert(std::make_pair(".mpv", "video/mpg"));
        map_.insert(std::make_pair(".mpv2", "video/mpeg"));
        map_.insert(std::make_pair(".mpw", "application/vnd.ms-project"));
        map_.insert(std::make_pair(".mpx", "application/vnd.ms-project"));
        map_.insert(std::make_pair(".mtx", "text/xml"));
        map_.insert(std::make_pair(".mxp", "application/x-mmxp"));
        map_.insert(std::make_pair(".net", "image/pnetvue"));
        map_.insert(std::make_pair(".nrf", "application/x-nrf"));
        map_.insert(std::make_pair(".nws", "message/rfc822"));
        map_.insert(std::make_pair(".odc", "text/x-ms-odc"));
        map_.insert(std::make_pair(".out", "application/x-out"));
        map_.insert(std::make_pair(".p10", "application/pkcs10"));
        map_.insert(std::make_pair(".p12", "application/x-pkcs12"));
        map_.insert(std::make_pair(".p7b", "application/x-pkcs7-certificates"));
        map_.insert(std::make_pair(".p7c", "application/pkcs7-mime"));
        map_.insert(std::make_pair(".p7m", "application/pkcs7-mime"));
        map_.insert(std::make_pair(".p7r", "application/x-pkcs7-certreqresp"));
        map_.insert(std::make_pair(".p7s", "application/pkcs7-signature"));
        map_.insert(std::make_pair(".pc5", "application/x-pc5"));
        map_.insert(std::make_pair(".pci", "application/x-pci"));
        map_.insert(std::make_pair(".pcl", "application/x-pcl"));
        map_.insert(std::make_pair(".pcx", "application/x-pcx"));
        map_.insert(std::make_pair(".pdf", "application/pdf"));
        map_.insert(std::make_pair(".pdf", "application/pdf"));
        map_.insert(std::make_pair(".pdx", "application/vnd.adobe.pdx"));
        map_.insert(std::make_pair(".pfx", "application/x-pkcs12"));
        map_.insert(std::make_pair(".pgl", "application/x-pgl"));
        map_.insert(std::make_pair(".pic", "application/x-pic"));
        map_.insert(std::make_pair(".pko", "application/vnd.ms-pki.pko"));
        map_.insert(std::make_pair(".pl", "application/x-perl"));
        map_.insert(std::make_pair(".plg", "text/html"));
        map_.insert(std::make_pair(".pls", "audio/scpls"));
        map_.insert(std::make_pair(".plt", "application/x-plt"));
        map_.insert(std::make_pair(".png", "image/png"));
        map_.insert(std::make_pair(".png", "application/x-png"));
        map_.insert(std::make_pair(".pot", "application/vnd.ms-powerpoint"));
        map_.insert(std::make_pair(".ppa", "application/vnd.ms-powerpoint"));
        map_.insert(std::make_pair(".ppm", "application/x-ppm"));
        map_.insert(std::make_pair(".pps", "application/vnd.ms-powerpoint"));
        map_.insert(std::make_pair(".ppt", "application/vnd.ms-powerpoint"));
        map_.insert(std::make_pair(".ppt", "application/x-ppt"));
        map_.insert(std::make_pair(".pr", "application/x-pr"));
        map_.insert(std::make_pair(".prf", "application/pics-rules"));
        map_.insert(std::make_pair(".prn", "application/x-prn"));
        map_.insert(std::make_pair(".prt", "application/x-prt"));
        map_.insert(std::make_pair(".ps", "application/x-ps"));
        map_.insert(std::make_pair(".ps", "application/postscript"));
        map_.insert(std::make_pair(".ptn", "application/x-ptn"));
        map_.insert(std::make_pair(".pwz", "application/vnd.ms-powerpoint"));
        map_.insert(std::make_pair(".r3t", "text/vnd.rn-realtext3d"));
        map_.insert(std::make_pair(".ra", "audio/vnd.rn-realaudio"));
        map_.insert(std::make_pair(".ram", "audio/x-pn-realaudio"));
        map_.insert(std::make_pair(".ras", "application/x-ras"));
        map_.insert(std::make_pair(".rat", "application/rat-file"));
        map_.insert(std::make_pair(".rdf", "text/xml"));
        map_.insert(std::make_pair(".rec", "application/vnd.rn-recording"));
        map_.insert(std::make_pair(".red", "application/x-red"));
        map_.insert(std::make_pair(".rgb", "application/x-rgb"));
        map_.insert(std::make_pair(".rjs", "application/vnd.rn-realsystem-rjs"));
        map_.insert(std::make_pair(".rjt", "application/vnd.rn-realsystem-rjt"));
        map_.insert(std::make_pair(".rlc", "application/x-rlc"));
        map_.insert(std::make_pair(".rle", "application/x-rle"));
        map_.insert(std::make_pair(".rm", "application/vnd.rn-realmedia"));
        map_.insert(std::make_pair(".rmf", "application/vnd.adobe.rmf"));
        map_.insert(std::make_pair(".rmi", "audio/mid"));
        map_.insert(std::make_pair(".rmj", "application/vnd.rn-realsystem-rmj"));
        map_.insert(std::make_pair(".rmm", "audio/x-pn-realaudio"));
        map_.insert(std::make_pair(".rmp", "application/vnd.rn-rn_music_package"));
        map_.insert(std::make_pair(".rms", "application/vnd.rn-realmedia-secure"));
        map_.insert(std::make_pair(".rmvb", "application/vnd.rn-realmedia-vbr"));
        map_.insert(std::make_pair(".rmx", "application/vnd.rn-realsystem-rmx"));
        map_.insert(std::make_pair(".rnx", "application/vnd.rn-realplayer"));
        map_.insert(std::make_pair(".rp", "image/vnd.rn-realpix"));
        map_.insert(std::make_pair(".rpm", "audio/x-pn-realaudio-plugin"));
        map_.insert(std::make_pair(".rsml", "application/vnd.rn-rsml"));
        map_.insert(std::make_pair(".rt", "text/vnd.rn-realtext"));
        map_.insert(std::make_pair(".rtf", "application/msword"));
        map_.insert(std::make_pair(".rtf", "application/x-rtf"));
        map_.insert(std::make_pair(".rv", "video/vnd.rn-realvideo"));
        map_.insert(std::make_pair(".sam", "application/x-sam"));
        map_.insert(std::make_pair(".sat", "application/x-sat"));
        map_.insert(std::make_pair(".sdp", "application/sdp"));
        map_.insert(std::make_pair(".sdw", "application/x-sdw"));
        map_.insert(std::make_pair(".sit", "application/x-stuffit"));
        map_.insert(std::make_pair(".slb", "application/x-slb"));
        map_.insert(std::make_pair(".sld", "application/x-sld"));
        map_.insert(std::make_pair(".slk", "drawing/x-slk"));
        map_.insert(std::make_pair(".smi", "application/smil"));
        map_.insert(std::make_pair(".smil", "application/smil"));
        map_.insert(std::make_pair(".smk", "application/x-smk"));
        map_.insert(std::make_pair(".snd", "audio/basic"));
        map_.insert(std::make_pair(".sol", "text/plain"));
        map_.insert(std::make_pair(".sor", "text/plain"));
        map_.insert(std::make_pair(".spc", "application/x-pkcs7-certificates"));
        map_.insert(std::make_pair(".spl", "application/futuresplash"));
        map_.insert(std::make_pair(".spp", "text/xml"));
        map_.insert(std::make_pair(".ssm", "application/streamingmedia"));
        map_.insert(std::make_pair(".sst", "application/vnd.ms-pki.certstore"));
        map_.insert(std::make_pair(".stl", "application/vnd.ms-pki.stl"));
        map_.insert(std::make_pair(".stm", "text/html"));
        map_.insert(std::make_pair(".sty", "application/x-sty"));
        map_.insert(std::make_pair(".svg", "text/xml"));
        map_.insert(std::make_pair(".swf", "application/x-shockwave-flash"));
        map_.insert(std::make_pair(".tdf", "application/x-tdf"));
        map_.insert(std::make_pair(".tg4", "application/x-tg4"));
        map_.insert(std::make_pair(".tga", "application/x-tga"));
        map_.insert(std::make_pair(".tif", "image/tiff"));
        map_.insert(std::make_pair(".tif", "application/x-tif"));
        map_.insert(std::make_pair(".tiff", "image/tiff"));
        map_.insert(std::make_pair(".tld", "text/xml"));
        map_.insert(std::make_pair(".top", "drawing/x-top"));
        map_.insert(std::make_pair(".torrent", "application/x-bittorrent"));
        map_.insert(std::make_pair(".tsd", "text/xml"));
        map_.insert(std::make_pair(".txt", "text/plain"));
        map_.insert(std::make_pair(".uin", "application/x-icq"));
        map_.insert(std::make_pair(".uls", "text/iuls"));
        map_.insert(std::make_pair(".vcf", "text/x-vcard"));
        map_.insert(std::make_pair(".vda", "application/x-vda"));
        map_.insert(std::make_pair(".vdx", "application/vnd.visio"));
        map_.insert(std::make_pair(".vml", "text/xml"));
        map_.insert(std::make_pair(".vpg", "application/x-vpeg005"));
        map_.insert(std::make_pair(".vsd", "application/vnd.visio"));
        map_.insert(std::make_pair(".vsd", "application/x-vsd"));
        map_.insert(std::make_pair(".vss", "application/vnd.visio"));
        map_.insert(std::make_pair(".vst", "application/vnd.visio"));
        map_.insert(std::make_pair(".vst", "application/x-vst"));
        map_.insert(std::make_pair(".vsw", "application/vnd.visio"));
        map_.insert(std::make_pair(".vsx", "application/vnd.visio"));
        map_.insert(std::make_pair(".vtx", "application/vnd.visio"));
        map_.insert(std::make_pair(".vxml", "text/xml"));
        map_.insert(std::make_pair(".wav", "audio/wav"));
        map_.insert(std::make_pair(".wax", "audio/x-ms-wax"));
        map_.insert(std::make_pair(".wb1", "application/x-wb1"));
        map_.insert(std::make_pair(".wb2", "application/x-wb2"));
        map_.insert(std::make_pair(".wb3", "application/x-wb3"));
        map_.insert(std::make_pair(".wbmp", "image/vnd.wap.wbmp"));
        map_.insert(std::make_pair(".wiz", "application/msword"));
        map_.insert(std::make_pair(".wk3", "application/x-wk3"));
        map_.insert(std::make_pair(".wk4", "application/x-wk4"));
        map_.insert(std::make_pair(".wkq", "application/x-wkq"));
        map_.insert(std::make_pair(".wks", "application/x-wks"));
        map_.insert(std::make_pair(".wm", "video/x-ms-wm"));
        map_.insert(std::make_pair(".wma", "audio/x-ms-wma"));
        map_.insert(std::make_pair(".wmd", "application/x-ms-wmd"));
        map_.insert(std::make_pair(".wmf", "application/x-wmf"));
        map_.insert(std::make_pair(".wml", "text/vnd.wap.wml"));
        map_.insert(std::make_pair(".wmv", "video/x-ms-wmv"));
        map_.insert(std::make_pair(".wmx", "video/x-ms-wmx"));
        map_.insert(std::make_pair(".wmz", "application/x-ms-wmz"));
        map_.insert(std::make_pair(".wp6", "application/x-wp6"));
        map_.insert(std::make_pair(".wpd", "application/x-wpd"));
        map_.insert(std::make_pair(".wpg", "application/x-wpg"));
        map_.insert(std::make_pair(".wpl", "application/vnd.ms-wpl"));
        map_.insert(std::make_pair(".wq1", "application/x-wq1"));
        map_.insert(std::make_pair(".wr1", "application/x-wr1"));
        map_.insert(std::make_pair(".wri", "application/x-wri"));
        map_.insert(std::make_pair(".wrk", "application/x-wrk"));
        map_.insert(std::make_pair(".ws", "application/x-ws"));
        map_.insert(std::make_pair(".ws2", "application/x-ws"));
        map_.insert(std::make_pair(".wsc", "text/scriptlet"));
        map_.insert(std::make_pair(".wsdl", "text/xml"));
        map_.insert(std::make_pair(".wvx", "video/x-ms-wvx"));
        map_.insert(std::make_pair(".xdp", "application/vnd.adobe.xdp"));
        map_.insert(std::make_pair(".xdr", "text/xml"));
        map_.insert(std::make_pair(".xfd", "application/vnd.adobe.xfd"));
        map_.insert(std::make_pair(".xfdf", "application/vnd.adobe.xfdf"));
        map_.insert(std::make_pair(".xhtml", "text/html"));
        map_.insert(std::make_pair(".xls", "application/vnd.ms-excel"));
        map_.insert(std::make_pair(".xls", "application/x-xls"));
        map_.insert(std::make_pair(".xlw", "application/x-xlw"));
        map_.insert(std::make_pair(".xml", "text/xml"));
        map_.insert(std::make_pair(".xpl", "audio/scpls"));
        map_.insert(std::make_pair(".xq", "text/xml"));
        map_.insert(std::make_pair(".xql", "text/xml"));
        map_.insert(std::make_pair(".xquery", "text/xml"));
        map_.insert(std::make_pair(".xsd", "text/xml"));
        map_.insert(std::make_pair(".xsl", "text/xml"));
        map_.insert(std::make_pair(".xslt", "text/xml"));
        map_.insert(std::make_pair(".xwd", "application/x-xwd"));
        map_.insert(std::make_pair(".x_b", "application/x-x_b"));
        map_.insert(std::make_pair(".sis", "application/vnd.symbian.install"));
        map_.insert(std::make_pair(".sisx", "application/vnd.symbian.install"));
        map_.insert(std::make_pair(".x_t", "application/x-x_t"));
        map_.insert(std::make_pair(".ipa", "application/vnd.iphone"));
        map_.insert(std::make_pair(".apk", "application/vnd.android.package-archive"));
        map_.insert(std::make_pair(".xap", "application/x-silverlight-app"));
    }

}
